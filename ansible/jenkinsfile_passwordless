pipeline {
  agent any

  environment {
    BASE_DIR = '/var/lib/jenkins/ansible'
    INVENTORY_FILE = "${BASE_DIR}/inventory.ini"
    PLAYBOOK = "${BASE_DIR}/check_expiry.yaml"
    WARNING_FILE = "${BASE_DIR}/warning_summary.txt"
  }

  stages {
    stage('Prepare') {
      steps {
        echo 'Cleaning up previous warning file...'
        sh "rm -f ${WARNING_FILE} || true"
      }
    }

    stage('Run Ansible Playbook') {
      steps {
        echo 'Running Ansible playbook with passwordless SSH...'
        sh """
          ansible-playbook -i ${INVENTORY_FILE} ${PLAYBOOK} -u ec2-user
        """
      }
    }

    stage('Notify if Warnings Exist') {
      steps {
        script {
          if (fileExists(WARNING_FILE)) {
            def warningContent = readFile(WARNING_FILE).trim()
            if (warningContent) {
              echo 'Warnings found, sending to Teams...'

              // Escape special characters
              def escapedContent = warningContent
                  .replace('\\', '\\\\')
                  .replace('"', '\\"')
                  .replace('\n', '\\n')

              withCredentials([string(credentialsId: 'teams', variable: 'TEAMS_WEBHOOK')]) {
                def payload = """{
                  "text": "üîî *Password Expiry Warning Report*\\n\\n${escapedContent}"
                }"""
                writeFile file: 'teams_payload.json', text: payload
                sh """curl -H 'Content-Type: application/json' -d @teams_payload.json "${TEAMS_WEBHOOK}" """
              }
            } else {
              echo 'No password expiry warnings found.'
            }
          } else {
            echo 'No warning summary file generated.'
          }
        }
      }
    }
  }

  post {
    failure {
      script {
        echo 'Build failed, notifying Teams...'
        withCredentials([string(credentialsId: 'teams', variable: 'TEAMS_WEBHOOK')]) {
          def failureMessage = """{
            "text": "‚ùå *Jenkins Job Failed:* ${env.JOB_NAME} #${env.BUILD_NUMBER}\\nCheck: ${env.BUILD_URL}console"
          }"""
          writeFile file: 'failure_payload.json', text: failureMessage
          sh """curl -H 'Content-Type: application/json' -d @failure_payload.json "${TEAMS_WEBHOOK}" """
        }
      }
    }
  }
}
